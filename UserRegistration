# bcrypt is a module used for secure password hashing
import bcrypt
# uuid is a module used for generating unique ID sessions
import uuid
# pandas is used for data manipulations
import pandas as pd

# key - user's email, value - hashed password
userDB = {}

# key - sessionID, value - user email associated with the session
sessionDB = {}

# Makes sure input follows basic email format
def validEmail(email):
    return "@" in email and "." in email

# Returns true if password is 8 char long
def validPassword(password):
    return len(password) >= 8

def saveToCSV(userDB, filename='userInfo.csv');
    # userDB becomes list of dictionaries
    data = [{"Email": email, "HashedPassword": hashedPassword.decode()} for email, hashedPassword in userDB.items()]

    # Converts to CSV file
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)

# Function to register a new user
def registerUser(userDB):

    email = input("Enter your email: ")
    password = input("Enter your password: ")

    if not validEmail(email):
        print("Invalid email format. Please try again.")
        return False

    if not validPassword(password):
        print("Password must be at least 8 characters long. Please try again.")
        return False

    if email in userDB:
        print("User already exists. Try logging in or use a different email.")
        return False

    # Hashes password and stores it
    hashedPassword = bcrypt.hashpw(password.encode(), bcrypt.gensalt())

    # Stores email and hashed password
    userDB[email] = hashedPassword
    print("User registered successfully.")
    return True

# Function to log in a user and create a sessionID
def loginUser(userDB, sessionDB):

    email = input("Enter your email: ")
    password = input("Enter your password: ")

    if email not in userDB:
        print("User not found. Please register first.")
        return None

    # Retrieves the stored hashed password
    storedPassword = userDB[email]

    # Compares plain text password to hashed password
    if bcrypt.checkpw(password.encode(), storedPassword):
        sessionID = str(uuid.uuid4())

        # Store the session ID and users email in sessionDB
        sessionDB[sessionID] = email
        print(f"Login successful.")
    else:
        print("Invalid password. Please try again.")
        return None

# Function to log out and terminate the session
def logoutUser(sessionDB, sessionID):
    
    if sessionID in sessionDB:
        
        del sessionDB[sessionID]
        print("Logout successful. Session terminated.")

# Main program loop
def main():
    sessionID = None

    while True:
        print("1. Register a new account")
        print("2. Log in to your account")
        print("3. Log out")

        choice = input("Enter your choice (1-3): ")

        if choice == "1":
            print("\nRegister a new user:")
            registerUser(userDB)

        elif choice == "2":
                print("\nLog in to your account:")
                sessionID = loginUser(userDB, sessionDB)

        elif choice == "3":
                print("\nLogging out.")
                logoutUser(sessionDB, sessionID)
                sessionID = None  # Resets sessionID after logging out

        else:
            print("Invalid choice. Please enter a number from 1 to 3.")

# Runs main program
main()
